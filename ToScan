using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        string creditCardNumber = "4111111111111111";
        string cvv = "123";
        
        // Verschlüsselung
        using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
        {
            aes.Key = aes.Key;  // Normalerweise speichert man den Schlüssel sicher
            aes.GenerateIV();

            byte[] encryptedCardNumber = EncryptStringToBytes(creditCardNumber, aes.Key, aes.IV);
            byte[] encryptedCVV = EncryptStringToBytes(cvv, aes.Key, aes.IV);

            Console.WriteLine("Verschlüsselte Kreditkartennummer: " + Convert.ToBase64String(encryptedCardNumber));
            Console.WriteLine("Verschlüsselter CVV: " + Convert.ToBase64String(encryptedCVV));

            // Entschlüsselung (zum Demonstrationszweck)
            string decryptedCardNumber = DecryptStringFromBytes(encryptedCardNumber, aes.Key, aes.IV);
            string decryptedCVV = DecryptStringFromBytes(encryptedCVV, aes.Key, aes.IV);

            Console.WriteLine("Entschlüsselte Kreditkartennummer: " + decryptedCardNumber);
            Console.WriteLine("Entschlüsselter CVV: " + decryptedCVV);
        }
    }

    static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)
    {
        if (plainText == null || plainText.Length <= 0)
            throw new ArgumentNullException("plainText");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException("Key");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException("IV");

        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    return msEncrypt.ToArray();
                }
            }
        }
    }

    static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)
    {
        if (cipherText == null || cipherText.Length <= 0)
            throw new ArgumentNullException("cipherText");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException("Key");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException("IV");

        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }
}
